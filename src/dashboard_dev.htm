<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Meteo clock</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <link href="//cdn.muicss.com/mui-0.10.3/css/mui.min.css" rel="stylesheet" type="text/css"/>
    <script src="//cdn.muicss.com/mui-0.10.3/js/mui.min.js"></script>
    <style>
        h3 {
            margin-top: 0;
            margin-bottom: 0;
            padding: 20px;
        }

        .control {
            display: flex;
            gap: 20px;
        }

        .control label {
            min-width: 80px;
        }

        .control input:not([type='checkbox']), .control select {
            flex-grow: 2;
        }

        .multi-control {
            display: flex;
            flex-direction: column;
        }

        .mui-container {
            padding: 20px;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            grid-template-rows: auto;
            grid-auto-rows: auto;
            gap: 20px
        }

        .mui-panel {
            margin: 0;
        }

        .mui-container::before {
            display: none;
        }

        .mui-appbar {
            margin-bottom: 15px;
        }
    </style>
</head>
<body class="mui-container">
<div class="mui-panel">
    <div class="mui-appbar">
        <h3>Status</h3>
    </div>
    <p class="control">
        <label>CO2:</label>
        <span id="co2Value"></span>
    </p>
    <p class="control">
        <label>Pressure:</label>
        <span id="pressure"></span>
    </p>
    <p class="control">
        <label>Temperature:</label>
        <span id="temperature"></span>
    </p>
    <p class="control">
        <label>Humidity:</label>
        <span id="humidity"></span>
    </p>
    <p class="control">
        <label>Rain:</label>
        <span id="rain"></span>
    </p>
    <p class="control">
        <label>Time:</label>
        <span id="time"></span>
    </p>
    <button type="button" class="mui-btn mui-btn--primary" onclick="refreshData()">Refresh</button>
</div>
<div class="mui-panel">
    <div class="mui-appbar">
        <h3>Config</h3>
    </div>
    <form action="/config" method="POST" class="mui-form">
        <div class="multi-control">
            <h4>Logs</h4>
            <p class="control">
                <label for="LogsEnabled">Enabled:</label>
                <input type="checkbox" id="LogsEnabled" name="logsEnabled">
            </p>

            <p class="control">
                <label for="LogsHost">Host:</label>
                <input id="LogsHost" name="logsHost">
            </p>
            <p class="control">
                <label for="LogsPort">Port:</label>
                <input id="LogsPort" name="logsPort">
            </p>
        </div>
        <div class="mui-divider"></div>
        <div class="multi-control">
            <h4>MQTT</h4>

            <p class="control">
                <label for="LogsEnabled">Enabled:</label>
                <input type="checkbox" id="MQTTEnabled" name="mqttEnabled">
            </p>

            <p class="control">
                <label for="MQTTName">Name:</label>
                <input id="MQTTName" name="mqttName">
            </p>

            <p class="control">
                <label for="MQTTHost">Host:</label>
                <input id="MQTTHost" name="mqttHost">
            </p>

            <p class="control">
                <label for="MQTTPort">Port:</label>
                <input id="MQTTPort" name="mqttPort">
            </p>
        </div>
        <button type="submit" class="mui-btn mui-btn--primary">Save</button>
        <button type="button" class="mui-btn mui-btn--primary" onclick="postTime()">Set Date & Time</button>
    </form>
</div>
<div class="mui-panel">
    <div class="mui-appbar">
        <h3>Wi-Fi</h3>
    </div>
    <form action="/wifi" method="POST" class="mui-form">
        <p class="control">
            <label for="WiFiSSID">SSID:</label>
            <input id="WiFiSSID" name="wifiSSID">
        </p>

        <p class="control">
            <label for="WiFiPassword">Password:</label>
            <input id="WiFiPassword" name="wifiPassword" type="password">
        </p>
        <button type="submit" class="mui-btn mui-btn--primary">Save & Restart</button>
    </form>
</div>
<div class="mui-panel">
    <div class="mui-appbar">
        <h3>Debug</h3>
    </div>
    <form action="/debug" method="POST">
        <p class="control">
            <label for="LedValue">Led value:</label>
            <select id="LedValue" name="ledValue">
                <option value="0">Off</option>
                <option value="1">Red</option>
                <option value="2">Green</option>
                <option value="3">Blue</option>
                <option value="4">Yellow</option>
            </select>
        </p>
        <p class="control">
            <label for="ModeValue">Mode:</label>
            <select id="ModeValue" name="modeValue">
                <option value="0">Clock</option>
                <option value="1">Temperature hourly</option>
                <option value="2">Temperature daily</option>
                <option value="3">Humidity hourly</option>
                <option value="4">Humidity daily</option>
                <option value="5">Pressure hourly</option>
                <option value="6">Pressure daily</option>
                <option value="7">CO2 hourly</option>
                <option value="8">CO2 daily</option>
                <option value="9">Rain hourly</option>
                <option value="10">Rain daily</option>
            </select>
        </p>
        <p class="control">
            <label for="LcdText">LCD Text:</label>
            <input id="LcdText" name="lcdText"/>
        </p>
        <button type="submit" class="mui-btn mui-btn--primary">Submit</button>
    </form>
</div>
<script>
    function applyData(currentData) {
        const {
            ledValue,
            modeValue,
            co2: {value: co2Value},
            bme: {pressure, temperature, humidity},
            time: {iso: isoTime},
            rain,
            logs: {enabled: logsEnabled, host: logsHost, port: logsPort},
            mqtt: {enabled: mqttEnabled, name: mqttName, host: mqttHost, port: mqttPort},
            wifi: {ssid}
        } = currentData;
        $('#co2Value').text(co2Value + 'ppm');
        $('#pressure').text(pressure.toFixed(2) + 'Pa');
        $('#temperature').text(temperature.toFixed(1) + 'Â°C');
        $('#humidity').text(humidity + '%');
        $('#rain').text(rain + '%');
        $('#time').text(isoTime);

        $(`#LedValue option[value="${ledValue}"]`).prop('selected', true);
        $(`#ModeValue option[value="${modeValue}"]`).prop('selected', true);
        $("#LogsEnabled").prop('checked', logsEnabled);
        $("#LogsHost").val(logsHost);
        $("#LogsPort").val(logsPort);
        $("#MQTTEnabled").prop('checked', mqttEnabled);
        $("#MQTTName").val(mqttName);
        $("#MQTTHost").val(mqttHost);
        $("#MQTTPort").val(mqttPort);
        $("#WiFiSSID").val(ssid);
    }

    async function refreshData() {
        const response = await fetch('/data');
        if (response.ok) {
            const data = await response.json();
            applyData(data);
        }
    }

    // test-data-start
    applyData({
        "ledValue": 3,
        "modeValue": 3,
        "photoValue": 341,
        "co2": {"status": 0, "value": 1135},
        "bme": {"pressure": 97773.60156, "temperature": 27.42000008, "humidity": 52},
        "time": {"iso": "2023-07-02T01:11:14"},
        "rain": 30,
        "logs": {enabled: true, host: "my.local", port: 8000},
        "mqtt": {enabled: true, name: "meteo", host: "mqtt.local", port: 1883},
        "wifi": {"ssid": "WWW"}
    });
    // test-data-end
    refreshData();
</script>
<script>
    async function postTime() {
        const rawEpochTime = Date.now().valueOf();
        const timezoneOffset = new Date().getTimezoneOffset();
        const timezoneOffsetMs = timezoneOffset * 60 * 1000;
        const adjustedEpochTime = rawEpochTime - timezoneOffsetMs;
        const body = new URLSearchParams();
        body.append('datetime', adjustedEpochTime);
        const response = await fetch('/datetime', {
            method: 'POST',
            body
        });
        if (response.ok) {
            window.location.href = response.url;
        }
    }
</script>
</body>
</html>